#Hammer

###everything looks like a nail

Hammer started its life as a recursive descent parser framework, but is currently being reborn as a set of patterns usable for regexp matching, parsing, or general pattern matching.

##Today

Hammer currently builds on this foundation of patterns to include a simple backtracking-free regexp matching algorithm based on the [derivative of regular expressions](http://matt.might.net/articles/implementation-of-regular-expression-matching-in-scheme-with-derivatives/).

The phrasing of the system is such that it’s perfectly amenable to matching and parsing patterns over arbitrary objects, collections, etc., without restriction.

And it’s fully extensible; add your own patterns with HammerBlockPattern or just write a class conforming to `HammerPattern` or `HammerDerivativePattern`.

##Tomorrow

Future work includes:

- a lexer
- a [derivative-based CFG parser](http://matt.might.net/articles/parsing-with-derivatives/) (a matcher based on Brzozowski's derivative is now implemented! generating parse forests is next)
- assertions for unit tests a la [Hamcrest](http://code.google.com/p/hamcrest/wiki/TutorialObjectiveC)
- captures (assignment to the enclosing scope) in patterns, regexps, and parsers
- parsers for all of the above:
	- writing regexps with the current matcher is a pain since there’s no concise parsed API for it
	- there ought to be an EBNF-like grammar for CFGs, too
	- pattern matching over KVC-compliant objects, collections, and capturing matched objects out of the term
- optional JIT and static compilation using LLVM for faster matching